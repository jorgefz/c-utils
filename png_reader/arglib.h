




/*


	ARGLIB - Command Line Argument Parsing Library
	
	DESCRIPTION
	This library interprets input command line arguments
	following custom available options defined by the user.
	These custom options can have both single and multi character labels,
	a description, and a data type.
	
	USAGE
	1) First, initialise library with the function:
		arglib_init()

	2) Then, add the desired options using the function:
		arglib_add_option()
	where the arguments are as follows:
		- char: single-char label for option. E.g. 'o'
		- string: multi-char label for option. E.g. 'output'
		- string: description of option: E.g. 'Specify output filename'
		- int: number code for data type
				Use built-in macros:
					ARG_FLAG 	0	Flag (no actual data type). False by default, but true if called.
					ARG_INT 	1	Integer value.
					ARG_FLOAT 	2	Double floating-point value.
					ARG_STR 	3 	String (char *) value.
		- int: boolean to specify whether option is optional or required.
				Use built-in macros:
					ARG_REQ 	0 	Option value must be specified
					ARG_OPT 	1 	Option value doesn't have to be specified
	Examples of adding options are:
		arglib_add_option('o', "output", "Output filename", ARG_STR, ARG_REQ)
		arglib_add_option('v', "verbose", "Display extra info", ARG_FLAG, ARG_REQ)
		arglib_add_option('i', "iter", "Number of iterations", ARG_INT, ARG_OPT)

	Note: it's not necessary to specify both the single and multi character labels. Only one is sufficient.
	The description is not necessary either.
	Furthermore, the help option ('h', 'help') is generated by default.
	
	3) Then, use the following function to parse the input arguments (argc, argv)
	using the specified options:
		arglib_parse(argc, argv)
	This function will return NULL if the parsing failed: a required argument is missing
	or has the wrong data type, or if one of the input arguments is help ('h', 'help')
	
	4) Now, in order to retrieve the read options, use:
		arglib_get_value("opt")
	Where "opt" is either label (single or multi-char) of an option.
	The returned value will have to be casted to the desired data type, and stored in local memory.
	If the option was left unspecified, NULL is returned.
	Example:
		int val = *(int *)arglib_get_value("i")
	A flag option will return a pointer that evaluates to NULL if the flag wasn't called, and
	to some memory location otherwise. In pseudo-code:
		if( arglib_get_value("flag") == NULL )
			// The flag wasn't called, '--flag' was not one of the input arguments.
		else
			// The flag was called with '--flag' (or its single-char label).

	5) Finally, in order to free the allocated data for the library, use:
		arglib_free()
	Note that the memory locations to which arglib_get_value() points will also be freed.

	An example of a final piece of code to define and parse options is:

		// Initialise required memory
		arglib_init();

		// Define custom options
		arglib_add_option( 'o', "output", 	"Filename and path of output data", 			ARG_STR, 	ARG_REQ);
		arglib_add_option( 'v', "verbose",	"Display extra information during simulation", 	ARG_FLAG, 	ARG_REQ);
		arglib_add_option( 'i', "iter", 	"Number of iterations", 						ARG_INT, 	ARG_OPT);

		// Parse options with input arguments. argv[] must have const label
		if( arglib_parse( argc, argv) == NULL ){
			return -1;
		}

		// Retrieve values
		int i = 	*(int *) arglib_get_value("iter");
		char out = 	*(char*) arglib_get_value("output");
		int verbose = 0;
		if( arglib_get_value("v") ){
			verbose = 1;
		}

	Now, when the program is compiled, the options available can be accessed with
	the flag argument '-h' or '--help'. This will list the user-specified options.
	Other options may be called with '-' for the single-char label, or '--' for the multi-char one.
	If the option is not a flag, it must be followed by a parameter.  For example,
		./main -h
		./main -o "output.dat" -i 100 --verbose

	
	
	VERSION HISTORY
	v 1.0 - 02/10/2020
		- Removed 50 character limit for option description.
			Now description is dynamically allocated.
		- Made _ARGS pointer global, hidden from user.

	v 1.1 - 02/10/2020
		- Fixed padding on help command
		- Reduced max size of string label to 12 characters









*/

#ifndef _ARGLIB_H_
#define _ARGLIB_H_


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Argument data type macros */
#define ARG_FLAG 0
#define ARG_INT 1
#define ARG_FLOAT 2
#define ARG_STR 3

/* Argument required/optional flag macros */
#define ARG_REQ 0
#define ARG_OPT 1

/* MAX string length of multi-char label */
#define ARG_MAX_SLABEL_LEN 12


typedef struct args_struct{
	// Parameter single character label (e.g. '-o')
	char c_label;
	// Parameter long label (e.g. '--output')
	char s_label[ARG_MAX_SLABEL_LEN];
	// Parameter description shown in help command
	char *descr;
	// Data types of parameter
	int dtype;
	// Required/Optional flag for parameter
	int flag_req;
	// Parameter value
	void *pval;
} _ARGS;



/*
Returns the current number of predefined arguments
*/
int arglib_argnum();


/*
Adds a new argument to the argument list with the input parameters.
If the parameter values are out of bounds, NULL is returned.
*/
_ARGS *arglib_add_option(const char c_label,
						 const char *s_label, 
						 const char *descr,
						 int type, int req);

/*
Initialises argument list and adds the help argument
*/
_ARGS *arglib_init();


/*
Frees option argument list
*/
void arglib_free();

/*
Interprets the command line arguments
and reads options and parameters.
*/
_ARGS *arglib_parse(const int argc, const char *argv[]);

/*
Retrieves the value of an option read from the input arguments.
The value must be cast to the appropriate data type.
Undefined options will return NULL.
Flags will return (int)0 if defined, and NULL otherwise. 
*/
void *arglib_get_value(const char *arg_label);

#endif



